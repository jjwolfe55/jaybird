CREATE TABLE lookup_linear_weights (
season_id SMALLINT UNSIGNED NOT NULL,
1b DECIMAL(3,2) UNSIGNED NOT NULL,
2b DECIMAL(3,2) UNSIGNED NOT NULL,
3b DECIMAL(3,2) UNSIGNED NOT NULL,
hr DECIMAL(3,2) UNSIGNED NOT NULL,
bb DECIMAL(3,2) UNSIGNED NOT NULL,
ibb DECIMAL(3,2) UNSIGNED NOT NULL,
hbp DECIMAL(3,2) UNSIGNED NOT NULL,
sb DECIMAL(3,2) UNSIGNED NOT NULL,
cs DECIMAL(3,2) NOT NULL,
PRIMARY KEY (season_id)
);

CREATE TABLE lookup_age_date (
season_id SMALLINT,
age_date INT,
PRIMARY KEY (season_id)
);

CREATE TABLE lookup_fielding_positions (
d_pos TINYINT,
d_pos_id VARCHAR(2),
d_pos_name CHAR(15),
PRIMARY KEY (d_pos)
);

CREATE TABLE lookup_run_environment (
season_id SMALLINT,
team_count SMALLINT,
team_runs_avg INT,
PRIMARY KEY (season_id)
);

CREATE TABLE lookup_team_history (
team_id VARCHAR(3),
league_id VARCHAR(15),
city VARCHAR(30),
nickname VARCHAR(30),
first_season SMALLINT,
last_season SMALLINT,
PRIMARY KEY (team_id)
);

CREATE TABLE lookup_player_bio (
player_id VARCHAR(9),
last_name VARCHAR(20),
first_name VARCHAR(20),
full_name VARCHAR(40),
birth_date INT,
birth_city VARCHAR(20),
birth_state VARCHAR(20),
birth_country VARCHAR(20),
death_date INT,
death_city VARCHAR(20),
death_state VARCHAR(20),
death_country VARCHAR(20),
cemetery_name VARCHAR(40),
cemetery_city VARCHAR(20),
cemetery_state VARCHAR(20),
cemetery_country VARCHAR(20),
cemetery_note VARCHAR(100),
birth_name VARCHAR(40),
alternate_name VARCHAR(40),
debut_player INT,
final_player INT,
debut_coach INT,
final_coach INT,
debut_manager INT,
final_manager INT,
debut_umpire INT,
final_umpire INT,
bats CHAR(1),
throws CHAR(1),
height_est SMALLINT,
weight_est SMALLINT,
HOF CHAR(3),
PRIMARY KEY (player_id)
);

INSERT INTO lookup_run_environment (
season_id,
team_count,
team_runs_avg
)
SELECT a.season_id,
COUNT(DISTINCT(a.team_id)),
(b.runs_for + c.runs_against)/(COUNT(DISTINCT(a.team_id))) 
FROM standard_standings AS a
INNER JOIN (SELECT season_id, SUM(b_r) AS runs_for FROM standard_batting GROUP BY season_id) AS b
ON a.season_id = b.season_id
INNER JOIN (SELECT season_id, SUM(p_r) AS runs_against FROM standard_pitching GROUP BY season_id) AS c
ON a.season_id = c.season_id
WHERE a.season_id BETWEEN <xx> AND <yy>
GROUP BY a.season_id
ORDER BY a.season_id DESC;
